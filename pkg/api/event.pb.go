// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/api/event.proto

package api

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	resource "k8s.io/apimachinery/pkg/api/resource"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type JobSubmittedEvent struct {
	JobId    string    `protobuf:"bytes,1,opt,name=JobId,proto3" json:"JobId,omitempty"`
	JobSetId string    `protobuf:"bytes,2,opt,name=JobSetId,proto3" json:"JobSetId,omitempty"`
	Queue    string    `protobuf:"bytes,3,opt,name=Queue,proto3" json:"Queue,omitempty"`
	Created  time.Time `protobuf:"bytes,4,opt,name=Created,proto3,stdtime" json:"Created"`
	Job      Job       `protobuf:"bytes,5,opt,name=Job,proto3" json:"Job"`
}

func (m *JobSubmittedEvent) Reset()      { *m = JobSubmittedEvent{} }
func (*JobSubmittedEvent) ProtoMessage() {}
func (*JobSubmittedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{0}
}
func (m *JobSubmittedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobSubmittedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobSubmittedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobSubmittedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobSubmittedEvent.Merge(m, src)
}
func (m *JobSubmittedEvent) XXX_Size() int {
	return m.Size()
}
func (m *JobSubmittedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_JobSubmittedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_JobSubmittedEvent proto.InternalMessageInfo

func (m *JobSubmittedEvent) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobSubmittedEvent) GetJobSetId() string {
	if m != nil {
		return m.JobSetId
	}
	return ""
}

func (m *JobSubmittedEvent) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *JobSubmittedEvent) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

func (m *JobSubmittedEvent) GetJob() Job {
	if m != nil {
		return m.Job
	}
	return Job{}
}

type JobQueuedEvent struct {
	JobId    string    `protobuf:"bytes,1,opt,name=JobId,proto3" json:"JobId,omitempty"`
	JobSetId string    `protobuf:"bytes,2,opt,name=JobSetId,proto3" json:"JobSetId,omitempty"`
	Queue    string    `protobuf:"bytes,3,opt,name=Queue,proto3" json:"Queue,omitempty"`
	Created  time.Time `protobuf:"bytes,4,opt,name=Created,proto3,stdtime" json:"Created"`
}

func (m *JobQueuedEvent) Reset()      { *m = JobQueuedEvent{} }
func (*JobQueuedEvent) ProtoMessage() {}
func (*JobQueuedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{1}
}
func (m *JobQueuedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobQueuedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobQueuedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobQueuedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobQueuedEvent.Merge(m, src)
}
func (m *JobQueuedEvent) XXX_Size() int {
	return m.Size()
}
func (m *JobQueuedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_JobQueuedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_JobQueuedEvent proto.InternalMessageInfo

func (m *JobQueuedEvent) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobQueuedEvent) GetJobSetId() string {
	if m != nil {
		return m.JobSetId
	}
	return ""
}

func (m *JobQueuedEvent) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *JobQueuedEvent) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

type JobLeasedEvent struct {
	JobId     string    `protobuf:"bytes,1,opt,name=JobId,proto3" json:"JobId,omitempty"`
	JobSetId  string    `protobuf:"bytes,2,opt,name=JobSetId,proto3" json:"JobSetId,omitempty"`
	Queue     string    `protobuf:"bytes,3,opt,name=Queue,proto3" json:"Queue,omitempty"`
	Created   time.Time `protobuf:"bytes,4,opt,name=Created,proto3,stdtime" json:"Created"`
	ClusterId string    `protobuf:"bytes,5,opt,name=ClusterId,proto3" json:"ClusterId,omitempty"`
}

func (m *JobLeasedEvent) Reset()      { *m = JobLeasedEvent{} }
func (*JobLeasedEvent) ProtoMessage() {}
func (*JobLeasedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{2}
}
func (m *JobLeasedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobLeasedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobLeasedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobLeasedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobLeasedEvent.Merge(m, src)
}
func (m *JobLeasedEvent) XXX_Size() int {
	return m.Size()
}
func (m *JobLeasedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_JobLeasedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_JobLeasedEvent proto.InternalMessageInfo

func (m *JobLeasedEvent) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobLeasedEvent) GetJobSetId() string {
	if m != nil {
		return m.JobSetId
	}
	return ""
}

func (m *JobLeasedEvent) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *JobLeasedEvent) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

func (m *JobLeasedEvent) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type JobLeaseReturnedEvent struct {
	JobId     string    `protobuf:"bytes,1,opt,name=JobId,proto3" json:"JobId,omitempty"`
	JobSetId  string    `protobuf:"bytes,2,opt,name=JobSetId,proto3" json:"JobSetId,omitempty"`
	Queue     string    `protobuf:"bytes,3,opt,name=Queue,proto3" json:"Queue,omitempty"`
	Created   time.Time `protobuf:"bytes,4,opt,name=Created,proto3,stdtime" json:"Created"`
	ClusterId string    `protobuf:"bytes,5,opt,name=ClusterId,proto3" json:"ClusterId,omitempty"`
	Reason    string    `protobuf:"bytes,6,opt,name=Reason,proto3" json:"Reason,omitempty"`
}

func (m *JobLeaseReturnedEvent) Reset()      { *m = JobLeaseReturnedEvent{} }
func (*JobLeaseReturnedEvent) ProtoMessage() {}
func (*JobLeaseReturnedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{3}
}
func (m *JobLeaseReturnedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobLeaseReturnedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobLeaseReturnedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobLeaseReturnedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobLeaseReturnedEvent.Merge(m, src)
}
func (m *JobLeaseReturnedEvent) XXX_Size() int {
	return m.Size()
}
func (m *JobLeaseReturnedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_JobLeaseReturnedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_JobLeaseReturnedEvent proto.InternalMessageInfo

func (m *JobLeaseReturnedEvent) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobLeaseReturnedEvent) GetJobSetId() string {
	if m != nil {
		return m.JobSetId
	}
	return ""
}

func (m *JobLeaseReturnedEvent) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *JobLeaseReturnedEvent) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

func (m *JobLeaseReturnedEvent) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *JobLeaseReturnedEvent) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type JobLeaseExpiredEvent struct {
	JobId    string    `protobuf:"bytes,1,opt,name=JobId,proto3" json:"JobId,omitempty"`
	JobSetId string    `protobuf:"bytes,2,opt,name=JobSetId,proto3" json:"JobSetId,omitempty"`
	Queue    string    `protobuf:"bytes,3,opt,name=Queue,proto3" json:"Queue,omitempty"`
	Created  time.Time `protobuf:"bytes,4,opt,name=Created,proto3,stdtime" json:"Created"`
}

func (m *JobLeaseExpiredEvent) Reset()      { *m = JobLeaseExpiredEvent{} }
func (*JobLeaseExpiredEvent) ProtoMessage() {}
func (*JobLeaseExpiredEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{4}
}
func (m *JobLeaseExpiredEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobLeaseExpiredEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobLeaseExpiredEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobLeaseExpiredEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobLeaseExpiredEvent.Merge(m, src)
}
func (m *JobLeaseExpiredEvent) XXX_Size() int {
	return m.Size()
}
func (m *JobLeaseExpiredEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_JobLeaseExpiredEvent.DiscardUnknown(m)
}

var xxx_messageInfo_JobLeaseExpiredEvent proto.InternalMessageInfo

func (m *JobLeaseExpiredEvent) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobLeaseExpiredEvent) GetJobSetId() string {
	if m != nil {
		return m.JobSetId
	}
	return ""
}

func (m *JobLeaseExpiredEvent) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *JobLeaseExpiredEvent) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

type JobPendingEvent struct {
	JobId        string    `protobuf:"bytes,1,opt,name=JobId,proto3" json:"JobId,omitempty"`
	JobSetId     string    `protobuf:"bytes,2,opt,name=JobSetId,proto3" json:"JobSetId,omitempty"`
	Queue        string    `protobuf:"bytes,3,opt,name=Queue,proto3" json:"Queue,omitempty"`
	Created      time.Time `protobuf:"bytes,4,opt,name=Created,proto3,stdtime" json:"Created"`
	ClusterId    string    `protobuf:"bytes,5,opt,name=ClusterId,proto3" json:"ClusterId,omitempty"`
	KubernetesId string    `protobuf:"bytes,6,opt,name=KubernetesId,proto3" json:"KubernetesId,omitempty"`
}

func (m *JobPendingEvent) Reset()      { *m = JobPendingEvent{} }
func (*JobPendingEvent) ProtoMessage() {}
func (*JobPendingEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{5}
}
func (m *JobPendingEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobPendingEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobPendingEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobPendingEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobPendingEvent.Merge(m, src)
}
func (m *JobPendingEvent) XXX_Size() int {
	return m.Size()
}
func (m *JobPendingEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_JobPendingEvent.DiscardUnknown(m)
}

var xxx_messageInfo_JobPendingEvent proto.InternalMessageInfo

func (m *JobPendingEvent) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobPendingEvent) GetJobSetId() string {
	if m != nil {
		return m.JobSetId
	}
	return ""
}

func (m *JobPendingEvent) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *JobPendingEvent) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

func (m *JobPendingEvent) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *JobPendingEvent) GetKubernetesId() string {
	if m != nil {
		return m.KubernetesId
	}
	return ""
}

type JobRunningEvent struct {
	JobId        string    `protobuf:"bytes,1,opt,name=JobId,proto3" json:"JobId,omitempty"`
	JobSetId     string    `protobuf:"bytes,2,opt,name=JobSetId,proto3" json:"JobSetId,omitempty"`
	Queue        string    `protobuf:"bytes,3,opt,name=Queue,proto3" json:"Queue,omitempty"`
	Created      time.Time `protobuf:"bytes,4,opt,name=Created,proto3,stdtime" json:"Created"`
	ClusterId    string    `protobuf:"bytes,5,opt,name=ClusterId,proto3" json:"ClusterId,omitempty"`
	KubernetesId string    `protobuf:"bytes,6,opt,name=KubernetesId,proto3" json:"KubernetesId,omitempty"`
	NodeName     string    `protobuf:"bytes,7,opt,name=NodeName,proto3" json:"NodeName,omitempty"`
}

func (m *JobRunningEvent) Reset()      { *m = JobRunningEvent{} }
func (*JobRunningEvent) ProtoMessage() {}
func (*JobRunningEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{6}
}
func (m *JobRunningEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobRunningEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobRunningEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobRunningEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobRunningEvent.Merge(m, src)
}
func (m *JobRunningEvent) XXX_Size() int {
	return m.Size()
}
func (m *JobRunningEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_JobRunningEvent.DiscardUnknown(m)
}

var xxx_messageInfo_JobRunningEvent proto.InternalMessageInfo

func (m *JobRunningEvent) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobRunningEvent) GetJobSetId() string {
	if m != nil {
		return m.JobSetId
	}
	return ""
}

func (m *JobRunningEvent) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *JobRunningEvent) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

func (m *JobRunningEvent) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *JobRunningEvent) GetKubernetesId() string {
	if m != nil {
		return m.KubernetesId
	}
	return ""
}

func (m *JobRunningEvent) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

type JobUnableToScheduleEvent struct {
	JobId        string    `protobuf:"bytes,1,opt,name=JobId,proto3" json:"JobId,omitempty"`
	JobSetId     string    `protobuf:"bytes,2,opt,name=JobSetId,proto3" json:"JobSetId,omitempty"`
	Queue        string    `protobuf:"bytes,3,opt,name=Queue,proto3" json:"Queue,omitempty"`
	Created      time.Time `protobuf:"bytes,4,opt,name=Created,proto3,stdtime" json:"Created"`
	ClusterId    string    `protobuf:"bytes,5,opt,name=ClusterId,proto3" json:"ClusterId,omitempty"`
	Reason       string    `protobuf:"bytes,6,opt,name=Reason,proto3" json:"Reason,omitempty"`
	KubernetesId string    `protobuf:"bytes,7,opt,name=KubernetesId,proto3" json:"KubernetesId,omitempty"`
	NodeName     string    `protobuf:"bytes,8,opt,name=NodeName,proto3" json:"NodeName,omitempty"`
}

func (m *JobUnableToScheduleEvent) Reset()      { *m = JobUnableToScheduleEvent{} }
func (*JobUnableToScheduleEvent) ProtoMessage() {}
func (*JobUnableToScheduleEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{7}
}
func (m *JobUnableToScheduleEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobUnableToScheduleEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobUnableToScheduleEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobUnableToScheduleEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobUnableToScheduleEvent.Merge(m, src)
}
func (m *JobUnableToScheduleEvent) XXX_Size() int {
	return m.Size()
}
func (m *JobUnableToScheduleEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_JobUnableToScheduleEvent.DiscardUnknown(m)
}

var xxx_messageInfo_JobUnableToScheduleEvent proto.InternalMessageInfo

func (m *JobUnableToScheduleEvent) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobUnableToScheduleEvent) GetJobSetId() string {
	if m != nil {
		return m.JobSetId
	}
	return ""
}

func (m *JobUnableToScheduleEvent) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *JobUnableToScheduleEvent) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

func (m *JobUnableToScheduleEvent) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *JobUnableToScheduleEvent) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *JobUnableToScheduleEvent) GetKubernetesId() string {
	if m != nil {
		return m.KubernetesId
	}
	return ""
}

func (m *JobUnableToScheduleEvent) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

type JobFailedEvent struct {
	JobId        string           `protobuf:"bytes,1,opt,name=JobId,proto3" json:"JobId,omitempty"`
	JobSetId     string           `protobuf:"bytes,2,opt,name=JobSetId,proto3" json:"JobSetId,omitempty"`
	Queue        string           `protobuf:"bytes,3,opt,name=Queue,proto3" json:"Queue,omitempty"`
	Created      time.Time        `protobuf:"bytes,4,opt,name=Created,proto3,stdtime" json:"Created"`
	ClusterId    string           `protobuf:"bytes,5,opt,name=ClusterId,proto3" json:"ClusterId,omitempty"`
	Reason       string           `protobuf:"bytes,6,opt,name=Reason,proto3" json:"Reason,omitempty"`
	ExitCodes    map[string]int32 `protobuf:"bytes,7,rep,name=ExitCodes,proto3" json:"ExitCodes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	KubernetesId string           `protobuf:"bytes,8,opt,name=KubernetesId,proto3" json:"KubernetesId,omitempty"`
	NodeName     string           `protobuf:"bytes,9,opt,name=NodeName,proto3" json:"NodeName,omitempty"`
}

func (m *JobFailedEvent) Reset()      { *m = JobFailedEvent{} }
func (*JobFailedEvent) ProtoMessage() {}
func (*JobFailedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{8}
}
func (m *JobFailedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobFailedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobFailedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobFailedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobFailedEvent.Merge(m, src)
}
func (m *JobFailedEvent) XXX_Size() int {
	return m.Size()
}
func (m *JobFailedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_JobFailedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_JobFailedEvent proto.InternalMessageInfo

func (m *JobFailedEvent) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobFailedEvent) GetJobSetId() string {
	if m != nil {
		return m.JobSetId
	}
	return ""
}

func (m *JobFailedEvent) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *JobFailedEvent) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

func (m *JobFailedEvent) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *JobFailedEvent) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *JobFailedEvent) GetExitCodes() map[string]int32 {
	if m != nil {
		return m.ExitCodes
	}
	return nil
}

func (m *JobFailedEvent) GetKubernetesId() string {
	if m != nil {
		return m.KubernetesId
	}
	return ""
}

func (m *JobFailedEvent) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

type JobSucceededEvent struct {
	JobId        string    `protobuf:"bytes,1,opt,name=JobId,proto3" json:"JobId,omitempty"`
	JobSetId     string    `protobuf:"bytes,2,opt,name=JobSetId,proto3" json:"JobSetId,omitempty"`
	Queue        string    `protobuf:"bytes,3,opt,name=Queue,proto3" json:"Queue,omitempty"`
	Created      time.Time `protobuf:"bytes,4,opt,name=Created,proto3,stdtime" json:"Created"`
	ClusterId    string    `protobuf:"bytes,5,opt,name=ClusterId,proto3" json:"ClusterId,omitempty"`
	KubernetesId string    `protobuf:"bytes,6,opt,name=KubernetesId,proto3" json:"KubernetesId,omitempty"`
	NodeName     string    `protobuf:"bytes,7,opt,name=NodeName,proto3" json:"NodeName,omitempty"`
}

func (m *JobSucceededEvent) Reset()      { *m = JobSucceededEvent{} }
func (*JobSucceededEvent) ProtoMessage() {}
func (*JobSucceededEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{9}
}
func (m *JobSucceededEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobSucceededEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobSucceededEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobSucceededEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobSucceededEvent.Merge(m, src)
}
func (m *JobSucceededEvent) XXX_Size() int {
	return m.Size()
}
func (m *JobSucceededEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_JobSucceededEvent.DiscardUnknown(m)
}

var xxx_messageInfo_JobSucceededEvent proto.InternalMessageInfo

func (m *JobSucceededEvent) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobSucceededEvent) GetJobSetId() string {
	if m != nil {
		return m.JobSetId
	}
	return ""
}

func (m *JobSucceededEvent) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *JobSucceededEvent) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

func (m *JobSucceededEvent) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *JobSucceededEvent) GetKubernetesId() string {
	if m != nil {
		return m.KubernetesId
	}
	return ""
}

func (m *JobSucceededEvent) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

type JobUtilisationEvent struct {
	JobId                 string                       `protobuf:"bytes,1,opt,name=JobId,proto3" json:"JobId,omitempty"`
	JobSetId              string                       `protobuf:"bytes,2,opt,name=JobSetId,proto3" json:"JobSetId,omitempty"`
	Queue                 string                       `protobuf:"bytes,3,opt,name=Queue,proto3" json:"Queue,omitempty"`
	Created               time.Time                    `protobuf:"bytes,4,opt,name=Created,proto3,stdtime" json:"Created"`
	ClusterId             string                       `protobuf:"bytes,5,opt,name=ClusterId,proto3" json:"ClusterId,omitempty"`
	KubernetesId          string                       `protobuf:"bytes,6,opt,name=KubernetesId,proto3" json:"KubernetesId,omitempty"`
	MaxResourcesForPeriod map[string]resource.Quantity `protobuf:"bytes,7,rep,name=MaxResourcesForPeriod,proto3" json:"MaxResourcesForPeriod" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NodeName              string                       `protobuf:"bytes,8,opt,name=NodeName,proto3" json:"NodeName,omitempty"`
}

func (m *JobUtilisationEvent) Reset()      { *m = JobUtilisationEvent{} }
func (*JobUtilisationEvent) ProtoMessage() {}
func (*JobUtilisationEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{10}
}
func (m *JobUtilisationEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobUtilisationEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobUtilisationEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobUtilisationEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobUtilisationEvent.Merge(m, src)
}
func (m *JobUtilisationEvent) XXX_Size() int {
	return m.Size()
}
func (m *JobUtilisationEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_JobUtilisationEvent.DiscardUnknown(m)
}

var xxx_messageInfo_JobUtilisationEvent proto.InternalMessageInfo

func (m *JobUtilisationEvent) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobUtilisationEvent) GetJobSetId() string {
	if m != nil {
		return m.JobSetId
	}
	return ""
}

func (m *JobUtilisationEvent) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *JobUtilisationEvent) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

func (m *JobUtilisationEvent) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *JobUtilisationEvent) GetKubernetesId() string {
	if m != nil {
		return m.KubernetesId
	}
	return ""
}

func (m *JobUtilisationEvent) GetMaxResourcesForPeriod() map[string]resource.Quantity {
	if m != nil {
		return m.MaxResourcesForPeriod
	}
	return nil
}

func (m *JobUtilisationEvent) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

type JobReprioritizedEvent struct {
	JobId    string    `protobuf:"bytes,1,opt,name=JobId,proto3" json:"JobId,omitempty"`
	JobSetId string    `protobuf:"bytes,2,opt,name=JobSetId,proto3" json:"JobSetId,omitempty"`
	Queue    string    `protobuf:"bytes,3,opt,name=Queue,proto3" json:"Queue,omitempty"`
	Created  time.Time `protobuf:"bytes,4,opt,name=Created,proto3,stdtime" json:"Created"`
}

func (m *JobReprioritizedEvent) Reset()      { *m = JobReprioritizedEvent{} }
func (*JobReprioritizedEvent) ProtoMessage() {}
func (*JobReprioritizedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{11}
}
func (m *JobReprioritizedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobReprioritizedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobReprioritizedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobReprioritizedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobReprioritizedEvent.Merge(m, src)
}
func (m *JobReprioritizedEvent) XXX_Size() int {
	return m.Size()
}
func (m *JobReprioritizedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_JobReprioritizedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_JobReprioritizedEvent proto.InternalMessageInfo

func (m *JobReprioritizedEvent) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobReprioritizedEvent) GetJobSetId() string {
	if m != nil {
		return m.JobSetId
	}
	return ""
}

func (m *JobReprioritizedEvent) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *JobReprioritizedEvent) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

type JobCancellingEvent struct {
	JobId    string    `protobuf:"bytes,1,opt,name=JobId,proto3" json:"JobId,omitempty"`
	JobSetId string    `protobuf:"bytes,2,opt,name=JobSetId,proto3" json:"JobSetId,omitempty"`
	Queue    string    `protobuf:"bytes,3,opt,name=Queue,proto3" json:"Queue,omitempty"`
	Created  time.Time `protobuf:"bytes,4,opt,name=Created,proto3,stdtime" json:"Created"`
}

func (m *JobCancellingEvent) Reset()      { *m = JobCancellingEvent{} }
func (*JobCancellingEvent) ProtoMessage() {}
func (*JobCancellingEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{12}
}
func (m *JobCancellingEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobCancellingEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobCancellingEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobCancellingEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobCancellingEvent.Merge(m, src)
}
func (m *JobCancellingEvent) XXX_Size() int {
	return m.Size()
}
func (m *JobCancellingEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_JobCancellingEvent.DiscardUnknown(m)
}

var xxx_messageInfo_JobCancellingEvent proto.InternalMessageInfo

func (m *JobCancellingEvent) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobCancellingEvent) GetJobSetId() string {
	if m != nil {
		return m.JobSetId
	}
	return ""
}

func (m *JobCancellingEvent) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *JobCancellingEvent) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

type JobCancelledEvent struct {
	JobId    string    `protobuf:"bytes,1,opt,name=JobId,proto3" json:"JobId,omitempty"`
	JobSetId string    `protobuf:"bytes,2,opt,name=JobSetId,proto3" json:"JobSetId,omitempty"`
	Queue    string    `protobuf:"bytes,3,opt,name=Queue,proto3" json:"Queue,omitempty"`
	Created  time.Time `protobuf:"bytes,4,opt,name=Created,proto3,stdtime" json:"Created"`
}

func (m *JobCancelledEvent) Reset()      { *m = JobCancelledEvent{} }
func (*JobCancelledEvent) ProtoMessage() {}
func (*JobCancelledEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{13}
}
func (m *JobCancelledEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobCancelledEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobCancelledEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobCancelledEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobCancelledEvent.Merge(m, src)
}
func (m *JobCancelledEvent) XXX_Size() int {
	return m.Size()
}
func (m *JobCancelledEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_JobCancelledEvent.DiscardUnknown(m)
}

var xxx_messageInfo_JobCancelledEvent proto.InternalMessageInfo

func (m *JobCancelledEvent) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobCancelledEvent) GetJobSetId() string {
	if m != nil {
		return m.JobSetId
	}
	return ""
}

func (m *JobCancelledEvent) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *JobCancelledEvent) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

type JobTerminatedEvent struct {
	JobId     string    `protobuf:"bytes,1,opt,name=JobId,proto3" json:"JobId,omitempty"`
	JobSetId  string    `protobuf:"bytes,2,opt,name=JobSetId,proto3" json:"JobSetId,omitempty"`
	Queue     string    `protobuf:"bytes,3,opt,name=Queue,proto3" json:"Queue,omitempty"`
	Created   time.Time `protobuf:"bytes,4,opt,name=Created,proto3,stdtime" json:"Created"`
	ClusterId string    `protobuf:"bytes,5,opt,name=ClusterId,proto3" json:"ClusterId,omitempty"`
}

func (m *JobTerminatedEvent) Reset()      { *m = JobTerminatedEvent{} }
func (*JobTerminatedEvent) ProtoMessage() {}
func (*JobTerminatedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{14}
}
func (m *JobTerminatedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobTerminatedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobTerminatedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobTerminatedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobTerminatedEvent.Merge(m, src)
}
func (m *JobTerminatedEvent) XXX_Size() int {
	return m.Size()
}
func (m *JobTerminatedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_JobTerminatedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_JobTerminatedEvent proto.InternalMessageInfo

func (m *JobTerminatedEvent) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobTerminatedEvent) GetJobSetId() string {
	if m != nil {
		return m.JobSetId
	}
	return ""
}

func (m *JobTerminatedEvent) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *JobTerminatedEvent) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

func (m *JobTerminatedEvent) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

type EventMessage struct {
	// Types that are valid to be assigned to Events:
	//	*EventMessage_Submitted
	//	*EventMessage_Queued
	//	*EventMessage_Leased
	//	*EventMessage_LeaseReturned
	//	*EventMessage_LeaseExpired
	//	*EventMessage_Pending
	//	*EventMessage_Running
	//	*EventMessage_UnableToSchedule
	//	*EventMessage_Failed
	//	*EventMessage_Succeeded
	//	*EventMessage_Reprioritized
	//	*EventMessage_Cancelling
	//	*EventMessage_Cancelled
	//	*EventMessage_Terminated
	//	*EventMessage_Utilisation
	Events isEventMessage_Events `protobuf_oneof:"events"`
}

func (m *EventMessage) Reset()      { *m = EventMessage{} }
func (*EventMessage) ProtoMessage() {}
func (*EventMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{15}
}
func (m *EventMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMessage.Merge(m, src)
}
func (m *EventMessage) XXX_Size() int {
	return m.Size()
}
func (m *EventMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMessage.DiscardUnknown(m)
}

var xxx_messageInfo_EventMessage proto.InternalMessageInfo

type isEventMessage_Events interface {
	isEventMessage_Events()
	MarshalTo([]byte) (int, error)
	Size() int
}

type EventMessage_Submitted struct {
	Submitted *JobSubmittedEvent `protobuf:"bytes,1,opt,name=submitted,proto3,oneof"`
}
type EventMessage_Queued struct {
	Queued *JobQueuedEvent `protobuf:"bytes,2,opt,name=queued,proto3,oneof"`
}
type EventMessage_Leased struct {
	Leased *JobLeasedEvent `protobuf:"bytes,3,opt,name=leased,proto3,oneof"`
}
type EventMessage_LeaseReturned struct {
	LeaseReturned *JobLeaseReturnedEvent `protobuf:"bytes,4,opt,name=leaseReturned,proto3,oneof"`
}
type EventMessage_LeaseExpired struct {
	LeaseExpired *JobLeaseExpiredEvent `protobuf:"bytes,5,opt,name=leaseExpired,proto3,oneof"`
}
type EventMessage_Pending struct {
	Pending *JobPendingEvent `protobuf:"bytes,6,opt,name=pending,proto3,oneof"`
}
type EventMessage_Running struct {
	Running *JobRunningEvent `protobuf:"bytes,7,opt,name=running,proto3,oneof"`
}
type EventMessage_UnableToSchedule struct {
	UnableToSchedule *JobUnableToScheduleEvent `protobuf:"bytes,8,opt,name=unableToSchedule,proto3,oneof"`
}
type EventMessage_Failed struct {
	Failed *JobFailedEvent `protobuf:"bytes,9,opt,name=failed,proto3,oneof"`
}
type EventMessage_Succeeded struct {
	Succeeded *JobSucceededEvent `protobuf:"bytes,10,opt,name=succeeded,proto3,oneof"`
}
type EventMessage_Reprioritized struct {
	Reprioritized *JobReprioritizedEvent `protobuf:"bytes,11,opt,name=reprioritized,proto3,oneof"`
}
type EventMessage_Cancelling struct {
	Cancelling *JobCancellingEvent `protobuf:"bytes,12,opt,name=cancelling,proto3,oneof"`
}
type EventMessage_Cancelled struct {
	Cancelled *JobCancelledEvent `protobuf:"bytes,13,opt,name=cancelled,proto3,oneof"`
}
type EventMessage_Terminated struct {
	Terminated *JobTerminatedEvent `protobuf:"bytes,14,opt,name=terminated,proto3,oneof"`
}
type EventMessage_Utilisation struct {
	Utilisation *JobUtilisationEvent `protobuf:"bytes,15,opt,name=utilisation,proto3,oneof"`
}

func (*EventMessage_Submitted) isEventMessage_Events()        {}
func (*EventMessage_Queued) isEventMessage_Events()           {}
func (*EventMessage_Leased) isEventMessage_Events()           {}
func (*EventMessage_LeaseReturned) isEventMessage_Events()    {}
func (*EventMessage_LeaseExpired) isEventMessage_Events()     {}
func (*EventMessage_Pending) isEventMessage_Events()          {}
func (*EventMessage_Running) isEventMessage_Events()          {}
func (*EventMessage_UnableToSchedule) isEventMessage_Events() {}
func (*EventMessage_Failed) isEventMessage_Events()           {}
func (*EventMessage_Succeeded) isEventMessage_Events()        {}
func (*EventMessage_Reprioritized) isEventMessage_Events()    {}
func (*EventMessage_Cancelling) isEventMessage_Events()       {}
func (*EventMessage_Cancelled) isEventMessage_Events()        {}
func (*EventMessage_Terminated) isEventMessage_Events()       {}
func (*EventMessage_Utilisation) isEventMessage_Events()      {}

func (m *EventMessage) GetEvents() isEventMessage_Events {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *EventMessage) GetSubmitted() *JobSubmittedEvent {
	if x, ok := m.GetEvents().(*EventMessage_Submitted); ok {
		return x.Submitted
	}
	return nil
}

func (m *EventMessage) GetQueued() *JobQueuedEvent {
	if x, ok := m.GetEvents().(*EventMessage_Queued); ok {
		return x.Queued
	}
	return nil
}

func (m *EventMessage) GetLeased() *JobLeasedEvent {
	if x, ok := m.GetEvents().(*EventMessage_Leased); ok {
		return x.Leased
	}
	return nil
}

func (m *EventMessage) GetLeaseReturned() *JobLeaseReturnedEvent {
	if x, ok := m.GetEvents().(*EventMessage_LeaseReturned); ok {
		return x.LeaseReturned
	}
	return nil
}

func (m *EventMessage) GetLeaseExpired() *JobLeaseExpiredEvent {
	if x, ok := m.GetEvents().(*EventMessage_LeaseExpired); ok {
		return x.LeaseExpired
	}
	return nil
}

func (m *EventMessage) GetPending() *JobPendingEvent {
	if x, ok := m.GetEvents().(*EventMessage_Pending); ok {
		return x.Pending
	}
	return nil
}

func (m *EventMessage) GetRunning() *JobRunningEvent {
	if x, ok := m.GetEvents().(*EventMessage_Running); ok {
		return x.Running
	}
	return nil
}

func (m *EventMessage) GetUnableToSchedule() *JobUnableToScheduleEvent {
	if x, ok := m.GetEvents().(*EventMessage_UnableToSchedule); ok {
		return x.UnableToSchedule
	}
	return nil
}

func (m *EventMessage) GetFailed() *JobFailedEvent {
	if x, ok := m.GetEvents().(*EventMessage_Failed); ok {
		return x.Failed
	}
	return nil
}

func (m *EventMessage) GetSucceeded() *JobSucceededEvent {
	if x, ok := m.GetEvents().(*EventMessage_Succeeded); ok {
		return x.Succeeded
	}
	return nil
}

func (m *EventMessage) GetReprioritized() *JobReprioritizedEvent {
	if x, ok := m.GetEvents().(*EventMessage_Reprioritized); ok {
		return x.Reprioritized
	}
	return nil
}

func (m *EventMessage) GetCancelling() *JobCancellingEvent {
	if x, ok := m.GetEvents().(*EventMessage_Cancelling); ok {
		return x.Cancelling
	}
	return nil
}

func (m *EventMessage) GetCancelled() *JobCancelledEvent {
	if x, ok := m.GetEvents().(*EventMessage_Cancelled); ok {
		return x.Cancelled
	}
	return nil
}

func (m *EventMessage) GetTerminated() *JobTerminatedEvent {
	if x, ok := m.GetEvents().(*EventMessage_Terminated); ok {
		return x.Terminated
	}
	return nil
}

func (m *EventMessage) GetUtilisation() *JobUtilisationEvent {
	if x, ok := m.GetEvents().(*EventMessage_Utilisation); ok {
		return x.Utilisation
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*EventMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _EventMessage_OneofMarshaler, _EventMessage_OneofUnmarshaler, _EventMessage_OneofSizer, []interface{}{
		(*EventMessage_Submitted)(nil),
		(*EventMessage_Queued)(nil),
		(*EventMessage_Leased)(nil),
		(*EventMessage_LeaseReturned)(nil),
		(*EventMessage_LeaseExpired)(nil),
		(*EventMessage_Pending)(nil),
		(*EventMessage_Running)(nil),
		(*EventMessage_UnableToSchedule)(nil),
		(*EventMessage_Failed)(nil),
		(*EventMessage_Succeeded)(nil),
		(*EventMessage_Reprioritized)(nil),
		(*EventMessage_Cancelling)(nil),
		(*EventMessage_Cancelled)(nil),
		(*EventMessage_Terminated)(nil),
		(*EventMessage_Utilisation)(nil),
	}
}

func _EventMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*EventMessage)
	// events
	switch x := m.Events.(type) {
	case *EventMessage_Submitted:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Submitted); err != nil {
			return err
		}
	case *EventMessage_Queued:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Queued); err != nil {
			return err
		}
	case *EventMessage_Leased:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Leased); err != nil {
			return err
		}
	case *EventMessage_LeaseReturned:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LeaseReturned); err != nil {
			return err
		}
	case *EventMessage_LeaseExpired:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LeaseExpired); err != nil {
			return err
		}
	case *EventMessage_Pending:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Pending); err != nil {
			return err
		}
	case *EventMessage_Running:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Running); err != nil {
			return err
		}
	case *EventMessage_UnableToSchedule:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UnableToSchedule); err != nil {
			return err
		}
	case *EventMessage_Failed:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Failed); err != nil {
			return err
		}
	case *EventMessage_Succeeded:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Succeeded); err != nil {
			return err
		}
	case *EventMessage_Reprioritized:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Reprioritized); err != nil {
			return err
		}
	case *EventMessage_Cancelling:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Cancelling); err != nil {
			return err
		}
	case *EventMessage_Cancelled:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Cancelled); err != nil {
			return err
		}
	case *EventMessage_Terminated:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Terminated); err != nil {
			return err
		}
	case *EventMessage_Utilisation:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Utilisation); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("EventMessage.Events has unexpected type %T", x)
	}
	return nil
}

func _EventMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*EventMessage)
	switch tag {
	case 1: // events.submitted
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JobSubmittedEvent)
		err := b.DecodeMessage(msg)
		m.Events = &EventMessage_Submitted{msg}
		return true, err
	case 2: // events.queued
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JobQueuedEvent)
		err := b.DecodeMessage(msg)
		m.Events = &EventMessage_Queued{msg}
		return true, err
	case 3: // events.leased
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JobLeasedEvent)
		err := b.DecodeMessage(msg)
		m.Events = &EventMessage_Leased{msg}
		return true, err
	case 4: // events.leaseReturned
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JobLeaseReturnedEvent)
		err := b.DecodeMessage(msg)
		m.Events = &EventMessage_LeaseReturned{msg}
		return true, err
	case 5: // events.leaseExpired
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JobLeaseExpiredEvent)
		err := b.DecodeMessage(msg)
		m.Events = &EventMessage_LeaseExpired{msg}
		return true, err
	case 6: // events.pending
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JobPendingEvent)
		err := b.DecodeMessage(msg)
		m.Events = &EventMessage_Pending{msg}
		return true, err
	case 7: // events.running
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JobRunningEvent)
		err := b.DecodeMessage(msg)
		m.Events = &EventMessage_Running{msg}
		return true, err
	case 8: // events.unableToSchedule
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JobUnableToScheduleEvent)
		err := b.DecodeMessage(msg)
		m.Events = &EventMessage_UnableToSchedule{msg}
		return true, err
	case 9: // events.failed
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JobFailedEvent)
		err := b.DecodeMessage(msg)
		m.Events = &EventMessage_Failed{msg}
		return true, err
	case 10: // events.succeeded
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JobSucceededEvent)
		err := b.DecodeMessage(msg)
		m.Events = &EventMessage_Succeeded{msg}
		return true, err
	case 11: // events.reprioritized
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JobReprioritizedEvent)
		err := b.DecodeMessage(msg)
		m.Events = &EventMessage_Reprioritized{msg}
		return true, err
	case 12: // events.cancelling
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JobCancellingEvent)
		err := b.DecodeMessage(msg)
		m.Events = &EventMessage_Cancelling{msg}
		return true, err
	case 13: // events.cancelled
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JobCancelledEvent)
		err := b.DecodeMessage(msg)
		m.Events = &EventMessage_Cancelled{msg}
		return true, err
	case 14: // events.terminated
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JobTerminatedEvent)
		err := b.DecodeMessage(msg)
		m.Events = &EventMessage_Terminated{msg}
		return true, err
	case 15: // events.utilisation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JobUtilisationEvent)
		err := b.DecodeMessage(msg)
		m.Events = &EventMessage_Utilisation{msg}
		return true, err
	default:
		return false, nil
	}
}

func _EventMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*EventMessage)
	// events
	switch x := m.Events.(type) {
	case *EventMessage_Submitted:
		s := proto.Size(x.Submitted)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMessage_Queued:
		s := proto.Size(x.Queued)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMessage_Leased:
		s := proto.Size(x.Leased)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMessage_LeaseReturned:
		s := proto.Size(x.LeaseReturned)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMessage_LeaseExpired:
		s := proto.Size(x.LeaseExpired)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMessage_Pending:
		s := proto.Size(x.Pending)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMessage_Running:
		s := proto.Size(x.Running)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMessage_UnableToSchedule:
		s := proto.Size(x.UnableToSchedule)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMessage_Failed:
		s := proto.Size(x.Failed)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMessage_Succeeded:
		s := proto.Size(x.Succeeded)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMessage_Reprioritized:
		s := proto.Size(x.Reprioritized)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMessage_Cancelling:
		s := proto.Size(x.Cancelling)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMessage_Cancelled:
		s := proto.Size(x.Cancelled)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMessage_Terminated:
		s := proto.Size(x.Terminated)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *EventMessage_Utilisation:
		s := proto.Size(x.Utilisation)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type EventList struct {
	Events []*EventMessage `protobuf:"bytes,1,rep,name=Events,proto3" json:"Events,omitempty"`
}

func (m *EventList) Reset()      { *m = EventList{} }
func (*EventList) ProtoMessage() {}
func (*EventList) Descriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{16}
}
func (m *EventList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventList.Merge(m, src)
}
func (m *EventList) XXX_Size() int {
	return m.Size()
}
func (m *EventList) XXX_DiscardUnknown() {
	xxx_messageInfo_EventList.DiscardUnknown(m)
}

var xxx_messageInfo_EventList proto.InternalMessageInfo

func (m *EventList) GetEvents() []*EventMessage {
	if m != nil {
		return m.Events
	}
	return nil
}

// swagger:model
type EventStreamMessage struct {
	Id      string        `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Message *EventMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *EventStreamMessage) Reset()      { *m = EventStreamMessage{} }
func (*EventStreamMessage) ProtoMessage() {}
func (*EventStreamMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{17}
}
func (m *EventStreamMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventStreamMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventStreamMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventStreamMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventStreamMessage.Merge(m, src)
}
func (m *EventStreamMessage) XXX_Size() int {
	return m.Size()
}
func (m *EventStreamMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_EventStreamMessage.DiscardUnknown(m)
}

var xxx_messageInfo_EventStreamMessage proto.InternalMessageInfo

func (m *EventStreamMessage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *EventStreamMessage) GetMessage() *EventMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

// swagger:model
type JobSetRequest struct {
	Id            string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Watch         bool   `protobuf:"varint,2,opt,name=Watch,proto3" json:"Watch,omitempty"`
	FromMessageId string `protobuf:"bytes,3,opt,name=FromMessageId,proto3" json:"FromMessageId,omitempty"`
	Queue         string `protobuf:"bytes,4,opt,name=Queue,proto3" json:"Queue,omitempty"`
}

func (m *JobSetRequest) Reset()      { *m = JobSetRequest{} }
func (*JobSetRequest) ProtoMessage() {}
func (*JobSetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7758595c3bb8cf56, []int{18}
}
func (m *JobSetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobSetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobSetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobSetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobSetRequest.Merge(m, src)
}
func (m *JobSetRequest) XXX_Size() int {
	return m.Size()
}
func (m *JobSetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JobSetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JobSetRequest proto.InternalMessageInfo

func (m *JobSetRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *JobSetRequest) GetWatch() bool {
	if m != nil {
		return m.Watch
	}
	return false
}

func (m *JobSetRequest) GetFromMessageId() string {
	if m != nil {
		return m.FromMessageId
	}
	return ""
}

func (m *JobSetRequest) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func init() {
	proto.RegisterType((*JobSubmittedEvent)(nil), "api.JobSubmittedEvent")
	proto.RegisterType((*JobQueuedEvent)(nil), "api.JobQueuedEvent")
	proto.RegisterType((*JobLeasedEvent)(nil), "api.JobLeasedEvent")
	proto.RegisterType((*JobLeaseReturnedEvent)(nil), "api.JobLeaseReturnedEvent")
	proto.RegisterType((*JobLeaseExpiredEvent)(nil), "api.JobLeaseExpiredEvent")
	proto.RegisterType((*JobPendingEvent)(nil), "api.JobPendingEvent")
	proto.RegisterType((*JobRunningEvent)(nil), "api.JobRunningEvent")
	proto.RegisterType((*JobUnableToScheduleEvent)(nil), "api.JobUnableToScheduleEvent")
	proto.RegisterType((*JobFailedEvent)(nil), "api.JobFailedEvent")
	proto.RegisterMapType((map[string]int32)(nil), "api.JobFailedEvent.ExitCodesEntry")
	proto.RegisterType((*JobSucceededEvent)(nil), "api.JobSucceededEvent")
	proto.RegisterType((*JobUtilisationEvent)(nil), "api.JobUtilisationEvent")
	proto.RegisterMapType((map[string]resource.Quantity)(nil), "api.JobUtilisationEvent.MaxResourcesForPeriodEntry")
	proto.RegisterType((*JobReprioritizedEvent)(nil), "api.JobReprioritizedEvent")
	proto.RegisterType((*JobCancellingEvent)(nil), "api.JobCancellingEvent")
	proto.RegisterType((*JobCancelledEvent)(nil), "api.JobCancelledEvent")
	proto.RegisterType((*JobTerminatedEvent)(nil), "api.JobTerminatedEvent")
	proto.RegisterType((*EventMessage)(nil), "api.EventMessage")
	proto.RegisterType((*EventList)(nil), "api.EventList")
	proto.RegisterType((*EventStreamMessage)(nil), "api.EventStreamMessage")
	proto.RegisterType((*JobSetRequest)(nil), "api.JobSetRequest")
}

func init() { proto.RegisterFile("pkg/api/event.proto", fileDescriptor_7758595c3bb8cf56) }

var fileDescriptor_7758595c3bb8cf56 = []byte{
	// 1265 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x58, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xdf, 0xb5, 0x13, 0xff, 0x19, 0x27, 0x4e, 0x3b, 0x49, 0xd3, 0xc5, 0xb4, 0x4e, 0xb4, 0x70,
	0x08, 0xa0, 0xac, 0x8b, 0x83, 0xaa, 0x50, 0x55, 0x80, 0x12, 0x12, 0x6c, 0xb7, 0xa9, 0x9a, 0x4d,
	0x10, 0xe7, 0x5d, 0xef, 0xab, 0xb3, 0x64, 0xbd, 0xb3, 0xd9, 0x9d, 0x8d, 0x62, 0xaa, 0x4a, 0x88,
	0x0f, 0x80, 0x2a, 0x71, 0xa9, 0x04, 0x82, 0x6f, 0xc1, 0x01, 0x89, 0x7b, 0x8f, 0x95, 0x10, 0x52,
	0x25, 0xc4, 0xbf, 0x04, 0xf1, 0x15, 0x10, 0xe2, 0x82, 0x66, 0x66, 0xd7, 0xde, 0xb5, 0x13, 0x7a,
	0xe0, 0xe2, 0xe4, 0xe6, 0xd9, 0xf9, 0xfd, 0xde, 0xbc, 0xf7, 0x9b, 0x79, 0x6f, 0xde, 0x18, 0xcd,
	0x7a, 0xfb, 0x9d, 0x9a, 0xe1, 0xd9, 0x35, 0x38, 0x04, 0x97, 0x6a, 0x9e, 0x4f, 0x28, 0xc1, 0x59,
	0xc3, 0xb3, 0x2b, 0x0b, 0x1d, 0x42, 0x3a, 0x0e, 0xd4, 0xf8, 0x27, 0x33, 0x7c, 0x50, 0xa3, 0x76,
	0x17, 0x02, 0x6a, 0x74, 0x3d, 0x81, 0xaa, 0xf4, 0xa9, 0x07, 0x21, 0x84, 0x10, 0x7d, 0x7c, 0x79,
	0x98, 0x05, 0x5d, 0x8f, 0xf6, 0xa2, 0xc9, 0xe5, 0x8e, 0x4d, 0xf7, 0x42, 0x53, 0x6b, 0x93, 0x6e,
	0xad, 0x43, 0x3a, 0x64, 0x80, 0x62, 0x23, 0x3e, 0xe0, 0xbf, 0x22, 0xf8, 0xb5, 0xc8, 0x16, 0x5b,
	0xc3, 0x70, 0x5d, 0x42, 0x0d, 0x6a, 0x13, 0x37, 0x88, 0x66, 0xdf, 0xda, 0x5f, 0x0d, 0x34, 0x9b,
	0xb0, 0xd9, 0xae, 0xd1, 0xde, 0xb3, 0x5d, 0xf0, 0x7b, 0xb5, 0xd8, 0x25, 0x1f, 0x02, 0x12, 0xfa,
	0x6d, 0xa8, 0x75, 0xc0, 0x05, 0xdf, 0xa0, 0x60, 0x09, 0x96, 0xfa, 0xbd, 0x8c, 0x2e, 0xb7, 0x88,
	0xb9, 0x13, 0x9a, 0x5d, 0x9b, 0x52, 0xb0, 0x36, 0x58, 0xd8, 0x78, 0x0e, 0x4d, 0xb6, 0x88, 0xd9,
	0xb4, 0x14, 0x79, 0x51, 0x5e, 0x2a, 0xea, 0x62, 0x80, 0x2b, 0xa8, 0xc0, 0xa0, 0x40, 0x9b, 0x96,
	0x92, 0xe1, 0x13, 0xfd, 0x31, 0x63, 0x6c, 0xb3, 0xb0, 0x95, 0xac, 0x60, 0xf0, 0x01, 0x7e, 0x07,
	0xe5, 0xd7, 0x7d, 0x60, 0xcb, 0x29, 0x13, 0x8b, 0xf2, 0x52, 0xa9, 0x5e, 0xd1, 0x44, 0x0c, 0x5a,
	0x1c, 0xa9, 0xb6, 0x1b, 0xab, 0xb8, 0x56, 0x78, 0xfa, 0xcb, 0x82, 0xf4, 0xf8, 0xd7, 0x05, 0x59,
	0x8f, 0x49, 0x78, 0x11, 0x65, 0x5b, 0xc4, 0x54, 0x26, 0x39, 0xb7, 0xa0, 0x19, 0x9e, 0xad, 0xb5,
	0x88, 0xb9, 0x36, 0xc1, 0x90, 0x3a, 0x9b, 0x52, 0x9f, 0xc8, 0xa8, 0xdc, 0x22, 0x26, 0x5f, 0x6e,
	0xbc, 0x9c, 0x57, 0xbf, 0x15, 0xae, 0xdd, 0x05, 0x23, 0x18, 0x37, 0x5d, 0xaf, 0xa1, 0xe2, 0xba,
	0x13, 0x06, 0x14, 0xfc, 0xa6, 0xc5, 0xd5, 0x2d, 0xea, 0x83, 0x0f, 0xea, 0x8f, 0x32, 0xba, 0x12,
	0x3b, 0xae, 0x03, 0x0d, 0x7d, 0xf7, 0x5c, 0xf9, 0x8f, 0xe7, 0x51, 0x4e, 0x07, 0x23, 0x20, 0xae,
	0x92, 0xe3, 0x53, 0xd1, 0x48, 0xfd, 0x5a, 0x46, 0x73, 0x71, 0x5c, 0x1b, 0x47, 0x9e, 0xed, 0x8f,
	0xdb, 0x89, 0xf9, 0x49, 0x46, 0x33, 0x2d, 0x62, 0xde, 0x07, 0xd7, 0xb2, 0xdd, 0xce, 0x79, 0x92,
	0x5c, 0x45, 0x53, 0x77, 0x42, 0x13, 0x7c, 0x17, 0x28, 0x04, 0x4d, 0x2b, 0x12, 0x3e, 0xf5, 0x4d,
	0xfd, 0x4b, 0x44, 0xa7, 0x87, 0xae, 0x7b, 0xf1, 0xa2, 0x63, 0x3e, 0xdf, 0x23, 0x16, 0xdc, 0x33,
	0xba, 0xa0, 0xe4, 0x85, 0xcf, 0xf1, 0x58, 0x7d, 0x92, 0x41, 0x4a, 0x8b, 0x98, 0x1f, 0xba, 0x86,
	0xe9, 0xc0, 0x2e, 0xd9, 0x69, 0xef, 0x81, 0x15, 0x3a, 0x70, 0x01, 0x72, 0x6a, 0x44, 0x9a, 0xfc,
	0x0b, 0xa4, 0x29, 0x0c, 0x49, 0xf3, 0x79, 0x96, 0x17, 0xc9, 0x4d, 0xc3, 0x76, 0x2e, 0x44, 0x91,
	0xc1, 0xef, 0xa1, 0xe2, 0xc6, 0x91, 0x4d, 0xd7, 0x89, 0x05, 0x81, 0x92, 0x5f, 0xcc, 0x2e, 0x95,
	0xea, 0x6a, 0x7c, 0x71, 0x25, 0xa2, 0xd4, 0xfa, 0xa0, 0x0d, 0x97, 0xfa, 0x3d, 0x7d, 0x40, 0x1a,
	0x91, 0xb4, 0xf0, 0x02, 0x49, 0x8b, 0x69, 0x49, 0x2b, 0xb7, 0x51, 0x39, 0x6d, 0x1c, 0x5f, 0x42,
	0xd9, 0x7d, 0xe8, 0x45, 0x7a, 0xb2, 0x9f, 0x4c, 0xb1, 0x43, 0xc3, 0x09, 0x81, 0x4b, 0x39, 0xa9,
	0x8b, 0xc1, 0xad, 0xcc, 0xaa, 0xac, 0xfe, 0x1d, 0x37, 0x04, 0xed, 0x36, 0x80, 0x75, 0xbe, 0xf6,
	0xe4, 0xff, 0xe6, 0xe9, 0x9f, 0x59, 0x34, 0xcb, 0xf2, 0x94, 0xda, 0x8e, 0x1d, 0xf0, 0xe6, 0xea,
	0xa2, 0x45, 0x4f, 0xd0, 0x95, 0x2d, 0xe3, 0x48, 0x8f, 0xba, 0xc1, 0x60, 0x93, 0xf8, 0xf7, 0xc1,
	0xb7, 0x89, 0x15, 0x9d, 0xd4, 0x95, 0xf8, 0xa4, 0x0e, 0x4b, 0xa0, 0x9d, 0xca, 0xe2, 0xa7, 0x2b,
	0xea, 0xc6, 0x4e, 0xb7, 0xfb, 0x5f, 0xb9, 0x5f, 0x39, 0x42, 0x95, 0xb3, 0xcd, 0x9e, 0x72, 0x68,
	0xdf, 0x4f, 0x1e, 0xda, 0x52, 0x5d, 0xd3, 0x44, 0xc7, 0xab, 0x25, 0x3b, 0x5e, 0xcd, 0xdb, 0xef,
	0xf0, 0x20, 0xe2, 0x8e, 0x57, 0xdb, 0x0e, 0x0d, 0x97, 0xda, 0xb4, 0x97, 0x3c, 0xe4, 0xdf, 0x88,
	0x0e, 0x47, 0x07, 0xcf, 0xb7, 0x89, 0x6f, 0x53, 0xfb, 0x93, 0x71, 0x6b, 0x05, 0xbe, 0x92, 0x11,
	0x6e, 0x11, 0x73, 0xdd, 0x70, 0xdb, 0xe0, 0x38, 0xe3, 0x76, 0x5f, 0xaa, 0x5f, 0x8a, 0x2a, 0x11,
	0xb9, 0x37, 0x6e, 0xe2, 0x7d, 0x27, 0xc4, 0xdb, 0x05, 0xbf, 0x6b, 0xbb, 0x06, 0x3d, 0x5f, 0xdd,
	0xf7, 0x3f, 0x39, 0x34, 0xc5, 0xfd, 0xdd, 0x82, 0x20, 0x30, 0x3a, 0x80, 0x6f, 0xa2, 0x62, 0x10,
	0x3f, 0xcf, 0xb8, 0xeb, 0xa5, 0xfa, 0x7c, 0x9c, 0xa7, 0xe9, 0x77, 0x5b, 0x43, 0xd2, 0x07, 0x50,
	0xbc, 0x8c, 0x72, 0xfc, 0x25, 0x6a, 0x45, 0xf9, 0x32, 0x1b, 0x93, 0x12, 0x8f, 0xa5, 0x86, 0xa4,
	0x47, 0x20, 0x06, 0x77, 0xf8, 0x53, 0x85, 0x07, 0x9b, 0x80, 0x27, 0x1e, 0x30, 0x0c, 0x2e, 0x40,
	0x78, 0x0d, 0x4d, 0x3b, 0xc9, 0x07, 0x42, 0x5f, 0x8a, 0x24, 0x2b, 0xf5, 0x7a, 0x68, 0x48, 0x7a,
	0x9a, 0x82, 0xdf, 0x45, 0x53, 0x4e, 0xa2, 0x19, 0x8f, 0xde, 0x79, 0x2f, 0xa5, 0x4c, 0x24, 0x1b,
	0xf5, 0x86, 0xa4, 0xa7, 0x08, 0xf8, 0x06, 0xca, 0x7b, 0xa2, 0x59, 0xe6, 0xd5, 0xae, 0x54, 0x9f,
	0x8b, 0xb9, 0xc9, 0x1e, 0xba, 0x21, 0xe9, 0x31, 0x8c, 0x31, 0x7c, 0xd1, 0x80, 0xf2, 0xea, 0x9f,
	0x60, 0x24, 0xfb, 0x52, 0xc6, 0x88, 0x60, 0xf8, 0x0e, 0xba, 0x14, 0x0e, 0x35, 0x6e, 0xbc, 0x92,
	0x95, 0xea, 0xd7, 0xfb, 0xd5, 0xf2, 0xb4, 0xc6, 0xae, 0x21, 0xe9, 0x23, 0x44, 0x26, 0xf2, 0x03,
	0xde, 0x04, 0xf0, 0x5b, 0x3b, 0x21, 0x72, 0xa2, 0x35, 0x60, 0x22, 0x0b, 0x90, 0xd8, 0xfa, 0xe8,
	0x22, 0x56, 0xd0, 0xf0, 0xd6, 0x27, 0x6f, 0x68, 0xb1, 0xf5, 0xd1, 0x17, 0xb6, 0x39, 0x7e, 0xb2,
	0xb6, 0x29, 0xa5, 0xf4, 0xe6, 0x8c, 0x16, 0x3e, 0xb6, 0x39, 0x29, 0x0a, 0x7e, 0x1b, 0xa1, 0x76,
	0xbf, 0xfa, 0x28, 0x53, 0xdc, 0xc0, 0xd5, 0xd8, 0xc0, 0x50, 0x5d, 0x6a, 0x48, 0x7a, 0x02, 0xcc,
	0xdc, 0x6e, 0xc7, 0x95, 0x41, 0x99, 0x4e, 0xbb, 0x9d, 0x2e, 0x19, 0xcc, 0xed, 0x3e, 0x94, 0x2d,
	0x49, 0xfb, 0x39, 0xab, 0x94, 0xd3, 0x4b, 0x0e, 0x65, 0x33, 0x5b, 0x72, 0x00, 0xc6, 0xb7, 0x51,
	0x29, 0x1c, 0xdc, 0x59, 0xca, 0x0c, 0xe7, 0x2a, 0x67, 0x5d, 0x67, 0x0d, 0x49, 0x4f, 0xc2, 0xd7,
	0x0a, 0x28, 0xc7, 0xff, 0xef, 0x09, 0xd4, 0x9b, 0xa8, 0xc8, 0x11, 0x77, 0xed, 0x80, 0xe2, 0xd7,
	0x50, 0x8e, 0x0f, 0x02, 0x45, 0xe6, 0xd7, 0xe3, 0x65, 0x6e, 0x2f, 0x99, 0x9c, 0x7a, 0x04, 0x50,
	0xb7, 0x11, 0xe6, 0xbf, 0x76, 0xa8, 0x0f, 0x46, 0x37, 0x4e, 0xdd, 0x32, 0xca, 0xf4, 0xcb, 0x4d,
	0xa6, 0x69, 0xe1, 0x37, 0x50, 0xbe, 0x2b, 0xa6, 0xa2, 0x9c, 0x3c, 0xc5, 0x62, 0x8c, 0x50, 0x0f,
	0xd0, 0xb4, 0x28, 0x44, 0x3a, 0x1c, 0x84, 0x10, 0xd0, 0x11, 0x6b, 0x73, 0x68, 0xf2, 0x23, 0x83,
	0xb6, 0xf7, 0xb8, 0xad, 0x82, 0x2e, 0x06, 0xf8, 0x55, 0x34, 0xbd, 0xe9, 0x93, 0xd8, 0x85, 0xa6,
	0x15, 0xd5, 0xae, 0xf4, 0xc7, 0x41, 0x65, 0x9b, 0x48, 0x54, 0xb6, 0xfa, 0xcf, 0x32, 0x9a, 0x14,
	0xb5, 0x72, 0x15, 0x95, 0x75, 0xf0, 0x88, 0x4f, 0xb7, 0x42, 0x87, 0xda, 0x9e, 0x03, 0xb8, 0x3c,
	0x70, 0x95, 0x89, 0x53, 0x99, 0x1f, 0x29, 0x7a, 0x1b, 0x5d, 0x8f, 0xf6, 0xf0, 0x0a, 0x6b, 0x8c,
	0x19, 0x13, 0x8f, 0x06, 0x77, 0x26, 0x09, 0xd0, 0xcc, 0x07, 0x40, 0x45, 0xb8, 0x42, 0x51, 0x8c,
	0xfb, 0x07, 0xbd, 0xaf, 0x40, 0xe5, 0xea, 0xc0, 0x62, 0x4a, 0x68, 0xf5, 0x95, 0xcf, 0x7e, 0xf8,
	0xe3, 0x8b, 0xcc, 0x75, 0x55, 0xa9, 0x1d, 0xbe, 0x59, 0xfb, 0x98, 0x98, 0xcb, 0x01, 0xd0, 0xda,
	0x43, 0x1e, 0xd4, 0xa3, 0xda, 0xc3, 0xa6, 0xf5, 0xe8, 0x96, 0xfc, 0xfa, 0x0d, 0x79, 0x6d, 0xf1,
	0xf9, 0xef, 0x55, 0xe9, 0xd3, 0xe3, 0xaa, 0xfc, 0xf4, 0xb8, 0x2a, 0x3f, 0x3b, 0xae, 0xca, 0xbf,
	0x1d, 0x57, 0xe5, 0xc7, 0x27, 0x55, 0xe9, 0xd9, 0x49, 0x55, 0x7a, 0x7e, 0x52, 0x95, 0xcc, 0x1c,
	0x77, 0x6c, 0xe5, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcb, 0x70, 0xb5, 0x34, 0x08, 0x14, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EventClient is the client API for Event service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventClient interface {
	ReportMultiple(ctx context.Context, in *EventList, opts ...grpc.CallOption) (*types.Empty, error)
	Report(ctx context.Context, in *EventMessage, opts ...grpc.CallOption) (*types.Empty, error)
	GetJobSetEvents(ctx context.Context, in *JobSetRequest, opts ...grpc.CallOption) (Event_GetJobSetEventsClient, error)
}

type eventClient struct {
	cc *grpc.ClientConn
}

func NewEventClient(cc *grpc.ClientConn) EventClient {
	return &eventClient{cc}
}

func (c *eventClient) ReportMultiple(ctx context.Context, in *EventList, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/api.Event/ReportMultiple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventClient) Report(ctx context.Context, in *EventMessage, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/api.Event/Report", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventClient) GetJobSetEvents(ctx context.Context, in *JobSetRequest, opts ...grpc.CallOption) (Event_GetJobSetEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Event_serviceDesc.Streams[0], "/api.Event/GetJobSetEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventGetJobSetEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Event_GetJobSetEventsClient interface {
	Recv() (*EventStreamMessage, error)
	grpc.ClientStream
}

type eventGetJobSetEventsClient struct {
	grpc.ClientStream
}

func (x *eventGetJobSetEventsClient) Recv() (*EventStreamMessage, error) {
	m := new(EventStreamMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventServer is the server API for Event service.
type EventServer interface {
	ReportMultiple(context.Context, *EventList) (*types.Empty, error)
	Report(context.Context, *EventMessage) (*types.Empty, error)
	GetJobSetEvents(*JobSetRequest, Event_GetJobSetEventsServer) error
}

func RegisterEventServer(s *grpc.Server, srv EventServer) {
	s.RegisterService(&_Event_serviceDesc, srv)
}

func _Event_ReportMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServer).ReportMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Event/ReportMultiple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServer).ReportMultiple(ctx, req.(*EventList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Event_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServer).Report(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Event/Report",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServer).Report(ctx, req.(*EventMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Event_GetJobSetEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JobSetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventServer).GetJobSetEvents(m, &eventGetJobSetEventsServer{stream})
}

type Event_GetJobSetEventsServer interface {
	Send(*EventStreamMessage) error
	grpc.ServerStream
}

type eventGetJobSetEventsServer struct {
	grpc.ServerStream
}

func (x *eventGetJobSetEventsServer) Send(m *EventStreamMessage) error {
	return x.ServerStream.SendMsg(m)
}

var _Event_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Event",
	HandlerType: (*EventServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportMultiple",
			Handler:    _Event_ReportMultiple_Handler,
		},
		{
			MethodName: "Report",
			Handler:    _Event_Report_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetJobSetEvents",
			Handler:       _Event_GetJobSetEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/api/event.proto",
}

func (m *JobSubmittedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobSubmittedEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.JobId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobId)))
		i += copy(dAtA[i:], m.JobId)
	}
	if len(m.JobSetId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobSetId)))
		i += copy(dAtA[i:], m.JobSetId)
	}
	if len(m.Queue) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Queue)))
		i += copy(dAtA[i:], m.Queue)
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintEvent(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)))
	n1, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x2a
	i++
	i = encodeVarintEvent(dAtA, i, uint64(m.Job.Size()))
	n2, err := m.Job.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	return i, nil
}

func (m *JobQueuedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobQueuedEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.JobId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobId)))
		i += copy(dAtA[i:], m.JobId)
	}
	if len(m.JobSetId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobSetId)))
		i += copy(dAtA[i:], m.JobSetId)
	}
	if len(m.Queue) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Queue)))
		i += copy(dAtA[i:], m.Queue)
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintEvent(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)))
	n3, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	return i, nil
}

func (m *JobLeasedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobLeasedEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.JobId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobId)))
		i += copy(dAtA[i:], m.JobId)
	}
	if len(m.JobSetId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobSetId)))
		i += copy(dAtA[i:], m.JobSetId)
	}
	if len(m.Queue) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Queue)))
		i += copy(dAtA[i:], m.Queue)
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintEvent(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)))
	n4, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if len(m.ClusterId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ClusterId)))
		i += copy(dAtA[i:], m.ClusterId)
	}
	return i, nil
}

func (m *JobLeaseReturnedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobLeaseReturnedEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.JobId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobId)))
		i += copy(dAtA[i:], m.JobId)
	}
	if len(m.JobSetId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobSetId)))
		i += copy(dAtA[i:], m.JobSetId)
	}
	if len(m.Queue) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Queue)))
		i += copy(dAtA[i:], m.Queue)
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintEvent(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)))
	n5, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if len(m.ClusterId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ClusterId)))
		i += copy(dAtA[i:], m.ClusterId)
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	return i, nil
}

func (m *JobLeaseExpiredEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobLeaseExpiredEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.JobId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobId)))
		i += copy(dAtA[i:], m.JobId)
	}
	if len(m.JobSetId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobSetId)))
		i += copy(dAtA[i:], m.JobSetId)
	}
	if len(m.Queue) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Queue)))
		i += copy(dAtA[i:], m.Queue)
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintEvent(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)))
	n6, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	return i, nil
}

func (m *JobPendingEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobPendingEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.JobId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobId)))
		i += copy(dAtA[i:], m.JobId)
	}
	if len(m.JobSetId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobSetId)))
		i += copy(dAtA[i:], m.JobSetId)
	}
	if len(m.Queue) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Queue)))
		i += copy(dAtA[i:], m.Queue)
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintEvent(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)))
	n7, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	if len(m.ClusterId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ClusterId)))
		i += copy(dAtA[i:], m.ClusterId)
	}
	if len(m.KubernetesId) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.KubernetesId)))
		i += copy(dAtA[i:], m.KubernetesId)
	}
	return i, nil
}

func (m *JobRunningEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobRunningEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.JobId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobId)))
		i += copy(dAtA[i:], m.JobId)
	}
	if len(m.JobSetId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobSetId)))
		i += copy(dAtA[i:], m.JobSetId)
	}
	if len(m.Queue) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Queue)))
		i += copy(dAtA[i:], m.Queue)
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintEvent(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)))
	n8, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	if len(m.ClusterId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ClusterId)))
		i += copy(dAtA[i:], m.ClusterId)
	}
	if len(m.KubernetesId) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.KubernetesId)))
		i += copy(dAtA[i:], m.KubernetesId)
	}
	if len(m.NodeName) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.NodeName)))
		i += copy(dAtA[i:], m.NodeName)
	}
	return i, nil
}

func (m *JobUnableToScheduleEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobUnableToScheduleEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.JobId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobId)))
		i += copy(dAtA[i:], m.JobId)
	}
	if len(m.JobSetId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobSetId)))
		i += copy(dAtA[i:], m.JobSetId)
	}
	if len(m.Queue) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Queue)))
		i += copy(dAtA[i:], m.Queue)
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintEvent(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)))
	n9, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	if len(m.ClusterId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ClusterId)))
		i += copy(dAtA[i:], m.ClusterId)
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	if len(m.KubernetesId) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.KubernetesId)))
		i += copy(dAtA[i:], m.KubernetesId)
	}
	if len(m.NodeName) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.NodeName)))
		i += copy(dAtA[i:], m.NodeName)
	}
	return i, nil
}

func (m *JobFailedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobFailedEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.JobId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobId)))
		i += copy(dAtA[i:], m.JobId)
	}
	if len(m.JobSetId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobSetId)))
		i += copy(dAtA[i:], m.JobSetId)
	}
	if len(m.Queue) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Queue)))
		i += copy(dAtA[i:], m.Queue)
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintEvent(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)))
	n10, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	if len(m.ClusterId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ClusterId)))
		i += copy(dAtA[i:], m.ClusterId)
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	if len(m.ExitCodes) > 0 {
		for k, _ := range m.ExitCodes {
			dAtA[i] = 0x3a
			i++
			v := m.ExitCodes[k]
			mapSize := 1 + len(k) + sovEvent(uint64(len(k))) + 1 + sovEvent(uint64(v))
			i = encodeVarintEvent(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintEvent(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x10
			i++
			i = encodeVarintEvent(dAtA, i, uint64(v))
		}
	}
	if len(m.KubernetesId) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.KubernetesId)))
		i += copy(dAtA[i:], m.KubernetesId)
	}
	if len(m.NodeName) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.NodeName)))
		i += copy(dAtA[i:], m.NodeName)
	}
	return i, nil
}

func (m *JobSucceededEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobSucceededEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.JobId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobId)))
		i += copy(dAtA[i:], m.JobId)
	}
	if len(m.JobSetId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobSetId)))
		i += copy(dAtA[i:], m.JobSetId)
	}
	if len(m.Queue) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Queue)))
		i += copy(dAtA[i:], m.Queue)
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintEvent(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)))
	n11, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	if len(m.ClusterId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ClusterId)))
		i += copy(dAtA[i:], m.ClusterId)
	}
	if len(m.KubernetesId) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.KubernetesId)))
		i += copy(dAtA[i:], m.KubernetesId)
	}
	if len(m.NodeName) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.NodeName)))
		i += copy(dAtA[i:], m.NodeName)
	}
	return i, nil
}

func (m *JobUtilisationEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobUtilisationEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.JobId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobId)))
		i += copy(dAtA[i:], m.JobId)
	}
	if len(m.JobSetId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobSetId)))
		i += copy(dAtA[i:], m.JobSetId)
	}
	if len(m.Queue) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Queue)))
		i += copy(dAtA[i:], m.Queue)
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintEvent(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)))
	n12, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	if len(m.ClusterId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ClusterId)))
		i += copy(dAtA[i:], m.ClusterId)
	}
	if len(m.KubernetesId) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.KubernetesId)))
		i += copy(dAtA[i:], m.KubernetesId)
	}
	if len(m.MaxResourcesForPeriod) > 0 {
		for k, _ := range m.MaxResourcesForPeriod {
			dAtA[i] = 0x3a
			i++
			v := m.MaxResourcesForPeriod[k]
			msgSize := 0
			if (&v) != nil {
				msgSize = (&v).Size()
				msgSize += 1 + sovEvent(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovEvent(uint64(len(k))) + msgSize
			i = encodeVarintEvent(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintEvent(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintEvent(dAtA, i, uint64((&v).Size()))
			n13, err := (&v).MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n13
		}
	}
	if len(m.NodeName) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.NodeName)))
		i += copy(dAtA[i:], m.NodeName)
	}
	return i, nil
}

func (m *JobReprioritizedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobReprioritizedEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.JobId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobId)))
		i += copy(dAtA[i:], m.JobId)
	}
	if len(m.JobSetId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobSetId)))
		i += copy(dAtA[i:], m.JobSetId)
	}
	if len(m.Queue) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Queue)))
		i += copy(dAtA[i:], m.Queue)
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintEvent(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)))
	n14, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	return i, nil
}

func (m *JobCancellingEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobCancellingEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.JobId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobId)))
		i += copy(dAtA[i:], m.JobId)
	}
	if len(m.JobSetId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobSetId)))
		i += copy(dAtA[i:], m.JobSetId)
	}
	if len(m.Queue) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Queue)))
		i += copy(dAtA[i:], m.Queue)
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintEvent(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)))
	n15, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	return i, nil
}

func (m *JobCancelledEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobCancelledEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.JobId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobId)))
		i += copy(dAtA[i:], m.JobId)
	}
	if len(m.JobSetId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobSetId)))
		i += copy(dAtA[i:], m.JobSetId)
	}
	if len(m.Queue) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Queue)))
		i += copy(dAtA[i:], m.Queue)
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintEvent(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)))
	n16, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	return i, nil
}

func (m *JobTerminatedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobTerminatedEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.JobId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobId)))
		i += copy(dAtA[i:], m.JobId)
	}
	if len(m.JobSetId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.JobSetId)))
		i += copy(dAtA[i:], m.JobSetId)
	}
	if len(m.Queue) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Queue)))
		i += copy(dAtA[i:], m.Queue)
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintEvent(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)))
	n17, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n17
	if len(m.ClusterId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ClusterId)))
		i += copy(dAtA[i:], m.ClusterId)
	}
	return i, nil
}

func (m *EventMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Events != nil {
		nn18, err := m.Events.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn18
	}
	return i, nil
}

func (m *EventMessage_Submitted) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Submitted != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Submitted.Size()))
		n19, err := m.Submitted.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}
func (m *EventMessage_Queued) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Queued != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Queued.Size()))
		n20, err := m.Queued.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}
func (m *EventMessage_Leased) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Leased != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Leased.Size()))
		n21, err := m.Leased.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}
func (m *EventMessage_LeaseReturned) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LeaseReturned != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.LeaseReturned.Size()))
		n22, err := m.LeaseReturned.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}
func (m *EventMessage_LeaseExpired) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LeaseExpired != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.LeaseExpired.Size()))
		n23, err := m.LeaseExpired.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}
func (m *EventMessage_Pending) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Pending != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Pending.Size()))
		n24, err := m.Pending.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}
func (m *EventMessage_Running) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Running != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Running.Size()))
		n25, err := m.Running.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}
func (m *EventMessage_UnableToSchedule) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UnableToSchedule != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.UnableToSchedule.Size()))
		n26, err := m.UnableToSchedule.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}
func (m *EventMessage_Failed) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Failed != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Failed.Size()))
		n27, err := m.Failed.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}
func (m *EventMessage_Succeeded) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Succeeded != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Succeeded.Size()))
		n28, err := m.Succeeded.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}
func (m *EventMessage_Reprioritized) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Reprioritized != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Reprioritized.Size()))
		n29, err := m.Reprioritized.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}
func (m *EventMessage_Cancelling) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Cancelling != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Cancelling.Size()))
		n30, err := m.Cancelling.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	return i, nil
}
func (m *EventMessage_Cancelled) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Cancelled != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Cancelled.Size()))
		n31, err := m.Cancelled.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}
func (m *EventMessage_Terminated) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Terminated != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Terminated.Size()))
		n32, err := m.Terminated.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}
func (m *EventMessage_Utilisation) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Utilisation != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Utilisation.Size()))
		n33, err := m.Utilisation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}
func (m *EventList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEvent(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *EventStreamMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventStreamMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Message != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Message.Size()))
		n34, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	return i, nil
}

func (m *JobSetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobSetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Watch {
		dAtA[i] = 0x10
		i++
		if m.Watch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.FromMessageId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.FromMessageId)))
		i += copy(dAtA[i:], m.FromMessageId)
	}
	if len(m.Queue) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Queue)))
		i += copy(dAtA[i:], m.Queue)
	}
	return i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *JobSubmittedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.JobSetId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovEvent(uint64(l))
	l = m.Job.Size()
	n += 1 + l + sovEvent(uint64(l))
	return n
}

func (m *JobQueuedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.JobSetId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovEvent(uint64(l))
	return n
}

func (m *JobLeasedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.JobSetId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovEvent(uint64(l))
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *JobLeaseReturnedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.JobSetId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovEvent(uint64(l))
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *JobLeaseExpiredEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.JobSetId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovEvent(uint64(l))
	return n
}

func (m *JobPendingEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.JobSetId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovEvent(uint64(l))
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.KubernetesId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *JobRunningEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.JobSetId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovEvent(uint64(l))
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.KubernetesId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *JobUnableToScheduleEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.JobSetId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovEvent(uint64(l))
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.KubernetesId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *JobFailedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.JobSetId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovEvent(uint64(l))
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if len(m.ExitCodes) > 0 {
		for k, v := range m.ExitCodes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovEvent(uint64(len(k))) + 1 + sovEvent(uint64(v))
			n += mapEntrySize + 1 + sovEvent(uint64(mapEntrySize))
		}
	}
	l = len(m.KubernetesId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *JobSucceededEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.JobSetId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovEvent(uint64(l))
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.KubernetesId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *JobUtilisationEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.JobSetId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovEvent(uint64(l))
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.KubernetesId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if len(m.MaxResourcesForPeriod) > 0 {
		for k, v := range m.MaxResourcesForPeriod {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovEvent(uint64(len(k))) + 1 + l + sovEvent(uint64(l))
			n += mapEntrySize + 1 + sovEvent(uint64(mapEntrySize))
		}
	}
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *JobReprioritizedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.JobSetId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovEvent(uint64(l))
	return n
}

func (m *JobCancellingEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.JobSetId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovEvent(uint64(l))
	return n
}

func (m *JobCancelledEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.JobSetId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovEvent(uint64(l))
	return n
}

func (m *JobTerminatedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.JobSetId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovEvent(uint64(l))
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Events != nil {
		n += m.Events.Size()
	}
	return n
}

func (m *EventMessage_Submitted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Submitted != nil {
		l = m.Submitted.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *EventMessage_Queued) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Queued != nil {
		l = m.Queued.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *EventMessage_Leased) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Leased != nil {
		l = m.Leased.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *EventMessage_LeaseReturned) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LeaseReturned != nil {
		l = m.LeaseReturned.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *EventMessage_LeaseExpired) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LeaseExpired != nil {
		l = m.LeaseExpired.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *EventMessage_Pending) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pending != nil {
		l = m.Pending.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *EventMessage_Running) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Running != nil {
		l = m.Running.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *EventMessage_UnableToSchedule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnableToSchedule != nil {
		l = m.UnableToSchedule.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *EventMessage_Failed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Failed != nil {
		l = m.Failed.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *EventMessage_Succeeded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Succeeded != nil {
		l = m.Succeeded.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *EventMessage_Reprioritized) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reprioritized != nil {
		l = m.Reprioritized.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *EventMessage_Cancelling) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cancelling != nil {
		l = m.Cancelling.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *EventMessage_Cancelled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cancelled != nil {
		l = m.Cancelled.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *EventMessage_Terminated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Terminated != nil {
		l = m.Terminated.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *EventMessage_Utilisation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Utilisation != nil {
		l = m.Utilisation.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *EventList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	return n
}

func (m *EventStreamMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *JobSetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Watch {
		n += 2
	}
	l = len(m.FromMessageId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *JobSubmittedEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobSubmittedEvent{`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`JobSetId:` + fmt.Sprintf("%v", this.JobSetId) + `,`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`Created:` + strings.Replace(strings.Replace(this.Created.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`Job:` + strings.Replace(strings.Replace(this.Job.String(), "Job", "Job", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobQueuedEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobQueuedEvent{`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`JobSetId:` + fmt.Sprintf("%v", this.JobSetId) + `,`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`Created:` + strings.Replace(strings.Replace(this.Created.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobLeasedEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobLeasedEvent{`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`JobSetId:` + fmt.Sprintf("%v", this.JobSetId) + `,`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`Created:` + strings.Replace(strings.Replace(this.Created.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`ClusterId:` + fmt.Sprintf("%v", this.ClusterId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobLeaseReturnedEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobLeaseReturnedEvent{`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`JobSetId:` + fmt.Sprintf("%v", this.JobSetId) + `,`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`Created:` + strings.Replace(strings.Replace(this.Created.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`ClusterId:` + fmt.Sprintf("%v", this.ClusterId) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobLeaseExpiredEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobLeaseExpiredEvent{`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`JobSetId:` + fmt.Sprintf("%v", this.JobSetId) + `,`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`Created:` + strings.Replace(strings.Replace(this.Created.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobPendingEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobPendingEvent{`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`JobSetId:` + fmt.Sprintf("%v", this.JobSetId) + `,`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`Created:` + strings.Replace(strings.Replace(this.Created.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`ClusterId:` + fmt.Sprintf("%v", this.ClusterId) + `,`,
		`KubernetesId:` + fmt.Sprintf("%v", this.KubernetesId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobRunningEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobRunningEvent{`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`JobSetId:` + fmt.Sprintf("%v", this.JobSetId) + `,`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`Created:` + strings.Replace(strings.Replace(this.Created.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`ClusterId:` + fmt.Sprintf("%v", this.ClusterId) + `,`,
		`KubernetesId:` + fmt.Sprintf("%v", this.KubernetesId) + `,`,
		`NodeName:` + fmt.Sprintf("%v", this.NodeName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobUnableToScheduleEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobUnableToScheduleEvent{`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`JobSetId:` + fmt.Sprintf("%v", this.JobSetId) + `,`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`Created:` + strings.Replace(strings.Replace(this.Created.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`ClusterId:` + fmt.Sprintf("%v", this.ClusterId) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`KubernetesId:` + fmt.Sprintf("%v", this.KubernetesId) + `,`,
		`NodeName:` + fmt.Sprintf("%v", this.NodeName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobFailedEvent) String() string {
	if this == nil {
		return "nil"
	}
	keysForExitCodes := make([]string, 0, len(this.ExitCodes))
	for k, _ := range this.ExitCodes {
		keysForExitCodes = append(keysForExitCodes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForExitCodes)
	mapStringForExitCodes := "map[string]int32{"
	for _, k := range keysForExitCodes {
		mapStringForExitCodes += fmt.Sprintf("%v: %v,", k, this.ExitCodes[k])
	}
	mapStringForExitCodes += "}"
	s := strings.Join([]string{`&JobFailedEvent{`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`JobSetId:` + fmt.Sprintf("%v", this.JobSetId) + `,`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`Created:` + strings.Replace(strings.Replace(this.Created.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`ClusterId:` + fmt.Sprintf("%v", this.ClusterId) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`ExitCodes:` + mapStringForExitCodes + `,`,
		`KubernetesId:` + fmt.Sprintf("%v", this.KubernetesId) + `,`,
		`NodeName:` + fmt.Sprintf("%v", this.NodeName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobSucceededEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobSucceededEvent{`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`JobSetId:` + fmt.Sprintf("%v", this.JobSetId) + `,`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`Created:` + strings.Replace(strings.Replace(this.Created.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`ClusterId:` + fmt.Sprintf("%v", this.ClusterId) + `,`,
		`KubernetesId:` + fmt.Sprintf("%v", this.KubernetesId) + `,`,
		`NodeName:` + fmt.Sprintf("%v", this.NodeName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobUtilisationEvent) String() string {
	if this == nil {
		return "nil"
	}
	keysForMaxResourcesForPeriod := make([]string, 0, len(this.MaxResourcesForPeriod))
	for k, _ := range this.MaxResourcesForPeriod {
		keysForMaxResourcesForPeriod = append(keysForMaxResourcesForPeriod, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMaxResourcesForPeriod)
	mapStringForMaxResourcesForPeriod := "map[string]resource.Quantity{"
	for _, k := range keysForMaxResourcesForPeriod {
		mapStringForMaxResourcesForPeriod += fmt.Sprintf("%v: %v,", k, this.MaxResourcesForPeriod[k])
	}
	mapStringForMaxResourcesForPeriod += "}"
	s := strings.Join([]string{`&JobUtilisationEvent{`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`JobSetId:` + fmt.Sprintf("%v", this.JobSetId) + `,`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`Created:` + strings.Replace(strings.Replace(this.Created.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`ClusterId:` + fmt.Sprintf("%v", this.ClusterId) + `,`,
		`KubernetesId:` + fmt.Sprintf("%v", this.KubernetesId) + `,`,
		`MaxResourcesForPeriod:` + mapStringForMaxResourcesForPeriod + `,`,
		`NodeName:` + fmt.Sprintf("%v", this.NodeName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobReprioritizedEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobReprioritizedEvent{`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`JobSetId:` + fmt.Sprintf("%v", this.JobSetId) + `,`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`Created:` + strings.Replace(strings.Replace(this.Created.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobCancellingEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobCancellingEvent{`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`JobSetId:` + fmt.Sprintf("%v", this.JobSetId) + `,`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`Created:` + strings.Replace(strings.Replace(this.Created.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobCancelledEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobCancelledEvent{`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`JobSetId:` + fmt.Sprintf("%v", this.JobSetId) + `,`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`Created:` + strings.Replace(strings.Replace(this.Created.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobTerminatedEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobTerminatedEvent{`,
		`JobId:` + fmt.Sprintf("%v", this.JobId) + `,`,
		`JobSetId:` + fmt.Sprintf("%v", this.JobSetId) + `,`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`Created:` + strings.Replace(strings.Replace(this.Created.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`ClusterId:` + fmt.Sprintf("%v", this.ClusterId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventMessage{`,
		`Events:` + fmt.Sprintf("%v", this.Events) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventMessage_Submitted) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventMessage_Submitted{`,
		`Submitted:` + strings.Replace(fmt.Sprintf("%v", this.Submitted), "JobSubmittedEvent", "JobSubmittedEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventMessage_Queued) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventMessage_Queued{`,
		`Queued:` + strings.Replace(fmt.Sprintf("%v", this.Queued), "JobQueuedEvent", "JobQueuedEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventMessage_Leased) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventMessage_Leased{`,
		`Leased:` + strings.Replace(fmt.Sprintf("%v", this.Leased), "JobLeasedEvent", "JobLeasedEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventMessage_LeaseReturned) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventMessage_LeaseReturned{`,
		`LeaseReturned:` + strings.Replace(fmt.Sprintf("%v", this.LeaseReturned), "JobLeaseReturnedEvent", "JobLeaseReturnedEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventMessage_LeaseExpired) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventMessage_LeaseExpired{`,
		`LeaseExpired:` + strings.Replace(fmt.Sprintf("%v", this.LeaseExpired), "JobLeaseExpiredEvent", "JobLeaseExpiredEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventMessage_Pending) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventMessage_Pending{`,
		`Pending:` + strings.Replace(fmt.Sprintf("%v", this.Pending), "JobPendingEvent", "JobPendingEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventMessage_Running) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventMessage_Running{`,
		`Running:` + strings.Replace(fmt.Sprintf("%v", this.Running), "JobRunningEvent", "JobRunningEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventMessage_UnableToSchedule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventMessage_UnableToSchedule{`,
		`UnableToSchedule:` + strings.Replace(fmt.Sprintf("%v", this.UnableToSchedule), "JobUnableToScheduleEvent", "JobUnableToScheduleEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventMessage_Failed) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventMessage_Failed{`,
		`Failed:` + strings.Replace(fmt.Sprintf("%v", this.Failed), "JobFailedEvent", "JobFailedEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventMessage_Succeeded) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventMessage_Succeeded{`,
		`Succeeded:` + strings.Replace(fmt.Sprintf("%v", this.Succeeded), "JobSucceededEvent", "JobSucceededEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventMessage_Reprioritized) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventMessage_Reprioritized{`,
		`Reprioritized:` + strings.Replace(fmt.Sprintf("%v", this.Reprioritized), "JobReprioritizedEvent", "JobReprioritizedEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventMessage_Cancelling) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventMessage_Cancelling{`,
		`Cancelling:` + strings.Replace(fmt.Sprintf("%v", this.Cancelling), "JobCancellingEvent", "JobCancellingEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventMessage_Cancelled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventMessage_Cancelled{`,
		`Cancelled:` + strings.Replace(fmt.Sprintf("%v", this.Cancelled), "JobCancelledEvent", "JobCancelledEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventMessage_Terminated) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventMessage_Terminated{`,
		`Terminated:` + strings.Replace(fmt.Sprintf("%v", this.Terminated), "JobTerminatedEvent", "JobTerminatedEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventMessage_Utilisation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventMessage_Utilisation{`,
		`Utilisation:` + strings.Replace(fmt.Sprintf("%v", this.Utilisation), "JobUtilisationEvent", "JobUtilisationEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventList{`,
		`Events:` + strings.Replace(fmt.Sprintf("%v", this.Events), "EventMessage", "EventMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventStreamMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventStreamMessage{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "EventMessage", "EventMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobSetRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobSetRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Watch:` + fmt.Sprintf("%v", this.Watch) + `,`,
		`FromMessageId:` + fmt.Sprintf("%v", this.FromMessageId) + `,`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringEvent(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *JobSubmittedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobSubmittedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobSubmittedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Job", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Job.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobQueuedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobQueuedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobQueuedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobLeasedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobLeasedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobLeasedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobLeaseReturnedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobLeaseReturnedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobLeaseReturnedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobLeaseExpiredEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobLeaseExpiredEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobLeaseExpiredEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobPendingEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobPendingEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobPendingEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubernetesId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubernetesId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobRunningEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobRunningEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobRunningEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubernetesId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubernetesId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobUnableToScheduleEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobUnableToScheduleEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobUnableToScheduleEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubernetesId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubernetesId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobFailedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobFailedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobFailedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitCodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExitCodes == nil {
				m.ExitCodes = make(map[string]int32)
			}
			var mapkey string
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthEvent
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthEvent
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipEvent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthEvent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ExitCodes[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubernetesId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubernetesId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobSucceededEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobSucceededEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobSucceededEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubernetesId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubernetesId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobUtilisationEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobUtilisationEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobUtilisationEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubernetesId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubernetesId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxResourcesForPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxResourcesForPeriod == nil {
				m.MaxResourcesForPeriod = make(map[string]resource.Quantity)
			}
			var mapkey string
			mapvalue := &resource.Quantity{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthEvent
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthEvent
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthEvent
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthEvent
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &resource.Quantity{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipEvent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthEvent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MaxResourcesForPeriod[mapkey] = *mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobReprioritizedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobReprioritizedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobReprioritizedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobCancellingEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobCancellingEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobCancellingEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobCancelledEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobCancelledEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobCancelledEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobTerminatedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobTerminatedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobTerminatedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Submitted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JobSubmittedEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Events = &EventMessage_Submitted{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queued", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JobQueuedEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Events = &EventMessage_Queued{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leased", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JobLeasedEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Events = &EventMessage_Leased{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseReturned", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JobLeaseReturnedEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Events = &EventMessage_LeaseReturned{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseExpired", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JobLeaseExpiredEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Events = &EventMessage_LeaseExpired{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pending", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JobPendingEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Events = &EventMessage_Pending{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Running", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JobRunningEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Events = &EventMessage_Running{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnableToSchedule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JobUnableToScheduleEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Events = &EventMessage_UnableToSchedule{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JobFailedEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Events = &EventMessage_Failed{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Succeeded", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JobSucceededEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Events = &EventMessage_Succeeded{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reprioritized", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JobReprioritizedEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Events = &EventMessage_Reprioritized{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cancelling", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JobCancellingEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Events = &EventMessage_Cancelling{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cancelled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JobCancelledEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Events = &EventMessage_Cancelled{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Terminated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JobTerminatedEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Events = &EventMessage_Terminated{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Utilisation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JobUtilisationEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Events = &EventMessage_Utilisation{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &EventMessage{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventStreamMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventStreamMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventStreamMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &EventMessage{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobSetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobSetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobSetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Watch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Watch = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromMessageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromMessageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthEvent
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEvent(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthEvent
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEvent = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent   = fmt.Errorf("proto: integer overflow")
)
